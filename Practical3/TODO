TODO:
Finish last bit of validate
       . store to detailed error log: fold, F1 score per class
       

Validate Future Command Line Args:
	 . num folds (def 10)
	 . LOO - leave one out on/off
	 . location of error logs
	 . algorithm to use

Basic Features
      . aggregate features producing one training row per sample
      . basic logistic regression

Other:
. Preliminary data analysis: number of different system calls and arguments, and their call frequency.

Detailed features:
. fix the most obvious features, like putting each last call as a separate feature instead of an enum
Validation code


Problem statement:
skewed (aka unbalanced) multi class classification

only measured on accuracy (TP / total), not F1 score. As baseline, mark all as None and get 52% accurate.
Would be a very corrupt machine if 48% of EXEs has viruses!

The higher the accuracy, the better the score, up to 100%. Basically assume it is None unless one
of the single item classifiers reports a reasonable score.

Output is an integer 0-14 following a specific order (see Problem Description).

Classification Alternatives:

1: basic multi-class logistic regression (see warmup)

2: one class SVM

3: Exemplar SVM

4: Deep Learning / neural net / pylearn2

Challenges / Open Questions:
. how to determine confidence when classifier's output is binary? 
. should classification rates be normalized? See [1]
. vectorized output should be in YAML format for rapid reading and potential use by Theano
. maybe use AWS to do the vectorize runs (which will be slow on my machine)
. is this like outlier detection?
. spend a little time figuring out how others have applied ML to virus detection

Background reading:

Exemplar SVM: http://www.cs.cmu.edu/~tmalisie/projects/iccv11/

Example of single class implementation of libSVM
  http://stackoverflow.com/questions/4214868/an-example-using-python-bindings-for-svm-library-libsvm

Multiclass SVM classification:
  http://svmlight.joachims.org/svm_multiclass.html

Exemplar SVM on github (octave / matlab)
  https://github.com/quantombone/exemplarsvm

One against all or One against All
  http://hal.archives-ouvertes.fr/docs/00/10/39/55/PDF/cr102875872670.pdf


